{"version":3,"sources":["components/key.js","App.js","reportWebVitals.js","index.js"],"names":["Key","letter","clickable","name","onClick","id","App","useState","letters","word","setWord","line","setLines","pickedLetters","setPickedLetters","guesses","setGuesses","resetGame","i","length","document","getElementById","classList","remove","repeat","generateWord","style","display","fetch","then","res","json","data","stringData","toString","toUpperCase","console","log","catch","error","alert","keyPressed","key","includes","prev","index","replacement","substr","replace","concat","add","minusScore","useEffect","className","map","individualKey","wordToGuess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mKAEaA,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAcC,GAAgB,EAAtBC,KAAsB,EAAhBD,WAClC,OACE,wBAAQE,QAASF,EAAWG,GAAI,SAAWJ,EAA3C,SACGA,KC8LQK,MAhMf,WAAgB,IAAD,EACiBC,mBAAS,CACrC,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MA3BW,mBACNC,EADM,aA6BWD,mBAAS,KA7BpB,mBA6BNE,EA7BM,KA6BAC,EA7BA,OA8BYH,mBAAS,IA9BrB,mBA8BNI,EA9BM,KA8BAC,EA9BA,OA+B6BL,mBAAS,IA/BtC,mBA+BNM,EA/BM,KA+BSC,EA/BT,OAgCiBP,qBAhCjB,mBAgCNQ,EAhCM,KAgCGC,EAhCH,KA0Db,SAASC,IACP,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAcM,OAAQD,IACxCE,SACGC,eAAe,SAAWR,EAAcK,IACxCI,UAAUC,OAAO,eACpBH,SACGC,eAAe,SAAWR,EAAcK,IACxCI,UAAUC,OAAO,eAEtBX,EAAS,IAAIY,OAAOf,EAAKU,SACzBM,IACAX,EAAiB,IACjBM,SAASC,eAAe,QAAQK,MAAMC,QAAU,OAGlD,SAASF,IACPG,MAAM,uDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAIC,EAAaD,EAAKE,WAAWC,cACjCzB,EAAQuB,GACRjB,EAAWiB,EAAWd,OAAS,GAC/BiB,QAAQC,IAAIL,MAEbM,OAAM,SAACC,GAAD,OAAWC,MAAM,yBAW5B,SAASC,EAAWC,GAClB,GAAI7B,EAAc8B,SAASD,SAEzB,IADM,IAAD,WACIxB,GACHT,EAAKS,IAAMwB,GACb9B,GAAS,SAACgC,GAAD,OAbjB,SAAiBnC,EAAMoC,EAAOC,GAC5B,OACErC,EAAKsC,OAAO,EAAGF,GACfC,EACArC,EAAKsC,OAAOF,EAAQC,EAAY3B,QAST6B,CAAQJ,EAAM1B,EAAGwB,MACpC5B,EAAiBD,EAAcoC,OAAOP,IACtCtB,SAASC,eAAe,SAAWqB,GAAKpB,UAAU4B,IAAI,iBAEtDpC,EAAiBD,EAAcoC,OAAOP,IACtCtB,SAASC,eAAe,SAAWqB,GAAKpB,UAAU4B,IAAI,eAO9D,SAAoBR,GAClB,IAAK,IAAIxB,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,IAC1BT,EAAKkC,SAASD,IACjB1B,EAAWD,EAAU,GATnBoC,CAAWT,KARNxB,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,IAAM,EAA9BA,GAsBb,OApFAkC,qBAAU,WACRxC,EAAS,IAAIY,OAAOf,EAAKU,WACxB,CAACV,IAEJ2C,qBAAU,WACJzC,GAAQF,GAAQE,EAAKQ,OAAS,IAChCF,IACAuB,MAAM,cAEP,CAAC3B,IAEJuC,qBAAU,WACO,GAAXrC,IACFK,SAASC,eAAe,QAAQK,MAAMC,QAAU,QAChDa,MAAM,8BAAgC/B,GACtCQ,OAED,CAACF,IAoEF,mCACE,qBAAKsC,UAAU,oBAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,cAAf,UACE,6BAAK1C,IACL,wBAAQP,QAAS,kBAzE/BqB,SACAW,QAAQC,IAAI5B,IAwEE,8BAEF,qBAAK4C,UAAU,gBAAgBhD,GAAG,OAAlC,SACE,6BAAKI,SAGT,sBAAK4C,UAAU,WAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,gDACA,6BAAKxC,OAEP,sBAAKwC,UAAU,cAAf,UACE,yCACA,6BAAKtC,eAMb,sBAAKsC,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,SACG7C,EAAQ8C,KAAI,SAACC,EAAeV,GAC3B,GAAIA,GAAS,EACX,OACE,cAAC,EAAD,CACE1C,KAAK,SACLF,OAAQsD,EACRC,YAAa/C,EACbP,UAAW,kBAAMuC,EAAWc,WAKtC,qBAAKF,UAAU,SAAf,SACG7C,EAAQ8C,KAAI,SAACC,EAAeV,GAC3B,GAAIA,EAAQ,GAAKA,EAAQ,GACvB,OACE,cAAC,EAAD,CACE1C,KAAK,SACLF,OAAQsD,EACRC,YAAa/C,EACbP,UAAW,kBAAMuC,EAAWc,WAKtC,qBAAKF,UAAU,QAAf,SACG7C,EAAQ8C,KAAI,SAACC,EAAeV,GAC3B,GAAIA,EAAQ,IAAMA,EAAQ,GACxB,OACE,cAAC,EAAD,CACE1C,KAAK,SACLF,OAAQsD,EACRC,YAAa/C,EACbP,UAAW,kBAAMuC,EAAWc,sBC5KnCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASC,eAAe,SAM1BoC,K","file":"static/js/main.334db28a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Key = ({ letter, name, clickable }) => {\r\n  return (\r\n    <button onClick={clickable} id={\"button\" + letter}>\r\n      {letter}\r\n    </button>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { Key } from \"./components/key\";\n\nfunction App() {\n  const [letters, setLetters] = useState([\n    \"Q\",\n    \"W\",\n    \"E\",\n    \"R\",\n    \"T\",\n    \"Y\",\n    \"U\",\n    \"I\",\n    \"O\",\n    \"P\",\n    \"A\",\n    \"S\",\n    \"D\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"Z\",\n    \"X\",\n    \"C\",\n    \"V\",\n    \"B\",\n    \"N\",\n    \"M\",\n  ]);\n  const [word, setWord] = useState(\"\");\n  const [line, setLines] = useState(\"\");\n  const [pickedLetters, setPickedLetters] = useState([]);\n  const [guesses, setGuesses] = useState();\n\n  useEffect(() => {\n    setLines(\"_\".repeat(word.length));\n  }, [word]);\n\n  useEffect(() => {\n    if (line == word && line.length > 0) {\n      resetGame();\n      alert(\"You Win\");\n    }\n  }, [pickedLetters]);\n\n  useEffect(() => {\n    if (guesses == 0) {\n      document.getElementById(\"show\").style.display = \"block\";\n      alert(\"You Lose \\n The Answer was \" + word);\n      resetGame();\n    }\n  }, [guesses]);\n\n  function startGame() {\n    generateWord();\n    console.log(word);\n  }\n\n  function resetGame() {\n    for (let i = 0; i < pickedLetters.length; i++) {\n      document\n        .getElementById(\"button\" + pickedLetters[i])\n        .classList.remove(\"buttonRight\");\n      document\n        .getElementById(\"button\" + pickedLetters[i])\n        .classList.remove(\"buttonWrong\");\n    }\n    setLines(\"_\".repeat(word.length));\n    generateWord();\n    setPickedLetters([]);\n    document.getElementById(\"show\").style.display = \"none\";\n  }\n\n  function generateWord() {\n    fetch(\"https://random-word-api.herokuapp.com/word/?swear=0\")\n      .then((res) => res.json())\n      .then((data) => {\n        let stringData = data.toString().toUpperCase();\n        setWord(stringData);\n        setGuesses(stringData.length + 1);\n        console.log(data);\n      })\n      .catch((error) => alert(\"Couldn't find data\"));\n  }\n\n  function replace(word, index, replacement) {\n    return (\n      word.substr(0, index) +\n      replacement +\n      word.substr(index + replacement.length)\n    );\n  }\n\n  function keyPressed(key) {\n    if (pickedLetters.includes(key)) {\n    } else {\n      for (let i = 0; i < word.length; i++) {\n        if (word[i] == key) {\n          setLines((prev) => replace(prev, i, key));\n          setPickedLetters(pickedLetters.concat(key));\n          document.getElementById(\"button\" + key).classList.add(\"buttonRight\");\n        } else {\n          setPickedLetters(pickedLetters.concat(key));\n          document.getElementById(\"button\" + key).classList.add(\"buttonWrong\");\n          minusScore(key);\n        }\n      }\n    }\n  }\n\n  function minusScore(key) {\n    for (let i = 0; i < word.length; i++) {\n      if (!word.includes(key)) {\n        setGuesses(guesses - 1);\n      }\n    }\n  }\n\n  return (\n    <>\n      <div className=\"content-container\">\n        <div className=\"content-wrapper\">\n          <div className=\"wordContainer\">\n            <div className=\"wordWrapper\">\n              <div className=\"wordToGuess\">\n                <div className=\"guessAnswer\">\n                  <h1>{line}</h1>\n                  <button onClick={() => startGame()}>Generate Word</button>\n                </div>\n                <div className=\"correctAnswer\" id=\"show\">\n                  <h1>{word}</h1>\n                </div>\n              </div>\n              <div className=\"gameInfo\">\n                <div className=\"pickedLetters\">\n                  <h2>Picked Letters</h2>\n                  <h3>{pickedLetters}</h3>\n                </div>\n                <div className=\"guessesLeft\">\n                  <h2>Guesses</h2>\n                  <h3>{guesses}</h3>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"keyboard\">\n            <div className=\"upper\">\n              {letters.map((individualKey, index) => {\n                if (index <= 9)\n                  return (\n                    <Key\n                      name=\"topRow\"\n                      letter={individualKey}\n                      wordToGuess={word}\n                      clickable={() => keyPressed(individualKey)}\n                    ></Key>\n                  );\n              })}\n            </div>\n            <div className=\"middle\">\n              {letters.map((individualKey, index) => {\n                if (index > 9 && index < 19)\n                  return (\n                    <Key\n                      name=\"topRow\"\n                      letter={individualKey}\n                      wordToGuess={word}\n                      clickable={() => keyPressed(individualKey)}\n                    ></Key>\n                  );\n              })}\n            </div>\n            <div className=\"lower\">\n              {letters.map((individualKey, index) => {\n                if (index > 18 && index < 27)\n                  return (\n                    <Key\n                      name=\"topRow\"\n                      letter={individualKey}\n                      wordToGuess={word}\n                      clickable={() => keyPressed(individualKey)}\n                    ></Key>\n                  );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}